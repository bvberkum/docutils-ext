
StateMachine.run: input_lines (line_offset=-1):
| {quote}
| h1. Notation Guide
| 
| For Atlassian Confluence.
| 
| {quote}

StateMachine.run: bof transition

StateMachine.run: line (source='<string>', offset=0):
| {quote}

StateMachine.check_line: state="Body", transitions=['blank', 'indent', 'explicit_markup', 'text'].

StateMachine.check_line: Matched transition "text" in state "Body".

StateMachine.get_state: Changing state from "Body" to "Text" (input line 1).

StateMachine.run: line (source='<string>', offset=1):
| h1. Notation Guide

StateMachine.check_line: state="Text", transitions=['blank', 'indent', 'text'].

StateMachine.check_line: Matched transition "text" in state "Text".

StateMachine.get_state: Changing state from "Text" to "Body" (input line 2).

StateMachine.run: line (source='<string>', offset=2):
| 

StateMachine.check_line: state="Body", transitions=['blank', 'indent', 'explicit_markup', 'text'].

StateMachine.check_line: Matched transition "blank" in state "Body".

StateMachine.run: line (source='<string>', offset=3):
| For Atlassian Confluence.

StateMachine.check_line: state="Body", transitions=['blank', 'indent', 'explicit_markup', 'text'].

StateMachine.check_line: Matched transition "text" in state "Body".

StateMachine.get_state: Changing state from "Body" to "Text" (input line 4).

StateMachine.run: line (source='<string>', offset=4):
| 

StateMachine.check_line: state="Text", transitions=['blank', 'indent', 'text'].

StateMachine.check_line: Matched transition "blank" in state "Text".

StateMachine.get_state: Changing state from "Text" to "Body" (input line 5).

StateMachine.run: line (source='<string>', offset=5):
| {quote}

StateMachine.check_line: state="Body", transitions=['blank', 'indent', 'explicit_markup', 'text'].

StateMachine.check_line: Matched transition "text" in state "Body".

StateMachine.get_state: Changing state from "Body" to "Text" (input line 6).

StateMachine.run: Text.eof transition
F
======================================================================
FAIL: Test1_DocumentAtlassian; Lossy doctree comparison; Parser 'atlassian-mpe'
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Volumes/Pandora-2/project/docutils-ext/test/util.py", line 110, in runTest
    self._test_parser(parser_class(), lossy=lossy)
  File "/Volumes/Pandora-2/project/docutils-ext/test/util.py", line 55, in _test_parser
    self.__test_parser(parser, lossy=lossy)
  File "/Volumes/Pandora-2/project/docutils-ext/test/util.py", line 90, in __test_parser
    warnings)
AssertionError: Error parsing test document
 on </Volumes/Pandora-2/project/docutils-ext/var/test-1.document-atlassian.txt>

<string>:1: (WARNING/2) Inline strong start-string without end-string.
<string>:6: (WARNING/2) Inline strong start-string without end-string.


----------------------------------------------------------------------
Ran 1 test in 0.009s

FAILED (failures=1)
